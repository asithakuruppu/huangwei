---
// Fundations
import Text from "@/components/fundations/elements/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import type { ImageMetadata } from 'astro';
// Images
import { Image } from "astro:assets";
// Import podcasts images
import one from "@/images/1.png";
import two from "@/images/2.png";
import three from "@/images/3.png";
import four from "@/images/4.png";
import five from "@/images/5.png";
import six from "@/images/6.png";
import seven from "@/images/7.png";
import eight from "@/images/8.png";
import nine from "@/images/9.png";
import ten from "@/images/10.png";
import eleven from "@/images/11.png";
import twelve from "@/images/12.png";
import thirteen from "@/images/13.png";
import fourteen from "@/images/14.png";
import fifteen from "@/images/15.png";
import sixteen from "@/images/16.png";
import seventeen from "@/images/17.png";
import eighteen from "@/images/18.png";
import nineteen from "@/images/19.png";
import twenty from "@/images/20.png";
import twentyOne from "@/images/21.png";
import twentyTwo from "@/images/22.png";
import twentyThree from "@/images/23.png";
import twentyFour from "@/images/24.png";
import twentyFive from "@/images/25.png";
import twentySix from "@/images/26.png";
import twentySeven from "@/images/27.png";

import {data} from "@/projectData.astro";

interface Project {
  title: string;
  year: string;
  imagePath: ImageMetadata;
  images: { path: ImageMetadata }[];
  description?: string;
  category?: string;
}

const ProjectData: Project[] = data;
---
<Wrapper variant="standard" class="bg-[url('/path/to/your/image.jpg')] bg-cover bg-center bg-no-repeat bg-fixed max-w-none lg:max-w-6xl xl:max-w-7xl mx-auto">
  <div
    class="grid grid-cols-2 gap-2 md:gap-4 py-4 text-sm border-b border-neutral-200 text-black font-serif"
  >
    <!-- <div class="">Date</div> -->
    <div>Project</div>
    <div class="text-right">Year</div>
    <!-- <div class="text-right hidden md:block text-neutral-500">Duration</div> -->
  </div>
  <div class="project-list divide-y divide-neutral-200">
    <!-- Project rows -->
    {
      ProjectData.map((podcast, index) => (
        <div class="group">
          <div class="grid grid-cols-2 gap-2 md:gap-4 font-serif py-4 cursor-pointer items-center text-black">

            <div>
              <Text tag="p" variant="textBase" class="tracking-wide text-xl">
                {podcast.title}
              </Text>
            </div>
            
            <div class="text-right italic text-neutral-500">
              <Text tag="p" variant="textBase" class="text-right text-md">
                {podcast.year}
              </Text>
            </div>
          </div>
          <div class="overflow-hidden max-h-0 transition-[max-height] duration-500 ease-in-out">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-8 py-4 md:py-8">
              <div class="md:col-span-2">
                <Text
                  tag="p"
                  variant="textBase"
                  class="text-neutral-500 text-balance"
                >
                  {podcast.description}
                </Text>
                <div class="mt-8">
                  <!-- <div class="flex">
                    <button
                      id={`openModal-${index}`}
                      class="text-xs h-10 bg-base-medium dark:bg-neutral-900 dark:text-white flex items-center gap-4 text-black rounded-full px-6"
                    >
                      Read notes and Transcript <span>→</span>
                    </button>
                  </div> -->
                  <!-- <div class="mt-12">
                    <Text
                      tag="p"
                      variant="textBase"
                      class="text-black italic font-serif"
                    >
                      Listen on
                    </Text>
                    <Wrapper variant="prose">
                      {/* <ul role="list">
                        {podcast.listenOn.map((platform) => (
                          <li>
                            <Text
                              tag="a"
                              variant="textSM"
                              href={platform.url}
                              class="hover:underline"
                            >
                              {platform.name}
                            </Text>
                          </li>
                        ))}
                      </ul> */}
                    </Wrapper>
                  </div> -->
                </div>
              </div>
              <div class="md:col-start-3">
                <div
                  id={`openModal-${index}`}
                  class="cursor-pointer"
                  onclick={`openModal(${index})`}
                >
                  <Image
                    src={podcast.imagePath}
                    alt={podcast.title}
                    width="600"
                    height="400"
                    class="w-full h-64 object-cover object-center"
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            id={`modal-${index}`}
            class="fixed inset-0 z-50 overflow-y-auto scrollbar-hide h-full w-full hidden opacity-0 transition-opacity duration-300 ease-in-out pointer-events-none"
          >
            <div class="absolute top-12 left-4 right-4 max-w-5xl mx-auto bg-base-medium shadow ring ring-neutral-200 transition-all duration-300 ease-in-out transform translate-y-full pointer-events-auto">
              <button
                id={`closeModal-${index}`}
                class="absolute top-8 right-8 text-xs text-black"
              >
                Close
              </button>
              <div class="p-12 lg:p-16">
                <div class="flex items-center gap-2 text-black">
                  <Text tag="p" variant="textBase" class="font-serif italic">
                    <span>{podcast.year}</span>
                  </Text>
                  <span>·</span>
                  <Text tag="p" variant="textBase" class="font-serif">
                    <span>{podcast.title}</span>
                  </Text>
                  <span>·</span>

                </div>
                <div class="relative mt-8">
                  <div class="overflow-hidden">
                    <div class="flex transition-transform duration-300 ease-in-out" id={`carousel-${index}`}>
      {Array.isArray(podcast.images) && podcast.images.length > 0 ? (
        podcast.images.map((image, imgIndex) => (
          <div class="min-w-full">
            <Image
              src={image.path}
              alt={podcast.title}
              width="1000"
              height="700"
              class="w-full h-96 md:h-[500px] object-cover object-center"
            />
          </div>
        ))
      ) : (
        <div class="min-w-full">
          <Image
            src={podcast.imagePath}
            alt={podcast.title}
            width="1000"
            height="700"
            class="w-full h-96 md:h-[500px] object-cover object-center"
          />
        </div>
      )}
    </div>
                  </div>
                 {Array.isArray(podcast.images) && podcast.images.length > 1 && (
    <>
      <button
        class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-neutral-900/50 text-white p-2 rounded-full"
        onclick={`carouselPrev(${index})`}
      >
        ←
      </button>
      <button
        class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-neutral-900/50 text-white p-2 rounded-full"
        onclick={`carouselNext(${index})`}
      >
        →
      </button>
    </>
  )}
                </div>
                
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</Wrapper>
<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    // Handle project row toggle
    const projectRows = document.querySelectorAll(".group");
    projectRows.forEach((row) => {
      const clickableArea = row.querySelector(".grid");
      const content = row.querySelector(".overflow-hidden");
      clickableArea.addEventListener("click", () => {
        projectRows.forEach((otherRow) => {
          if (otherRow !== row) {
            const otherContent = otherRow.querySelector(".overflow-hidden");
            otherRow.classList.remove("active");
            otherContent.style.maxHeight = "0";
          }
        });
        row.classList.toggle("active");
        if (row.classList.contains("active")) {
          content.style.maxHeight = content.scrollHeight + "px";
        } else {
          content.style.maxHeight = "0";
        }
      });
    });
  });

  // Modal and carousel functionality
  window.openModal = function(index) {
    const modal = document.getElementById(`modal-${index}`);
    const modalContent = modal.querySelector("div");
    modal.classList.remove("hidden");
    modal.offsetHeight;
    modal.classList.add("opacity-100");
    modalContent.classList.remove("translate-y-full");
  };

  document.addEventListener("DOMContentLoaded", () => {
    // Handle closing modals
    document.querySelectorAll("[id^='closeModal-']").forEach((button) => {
      button.addEventListener("click", () => {
        const index = button.id.split("-")[1];
        const modal = document.getElementById(`modal-${index}`);
        const modalContent = modal.querySelector("div");
        modal.classList.remove("opacity-100");
        modalContent.classList.add("translate-y-full");
        setTimeout(() => {
          modal.classList.add("hidden");
        }, 300);
      });
    });
    // Handle clicking outside modals - only close if clicking the modal content area
    document.querySelectorAll("[id^='modal-']").forEach((modal) => {
      const modalContent = modal.querySelector("div");
      modalContent.addEventListener("click", (e) => {
        // Only close if clicking directly on the modal content background, not its children
        if (e.target === modalContent) {
          modal.classList.remove("opacity-100");
          modalContent.classList.add("translate-y-full");
          setTimeout(() => {
            modal.classList.add("hidden");
          }, 300);
        }
      });
    });
  });

  window.carouselPrev = function(index) {
    const carousel = document.getElementById(`carousel-${index}`);
    const items = carousel.children;
    let currentTransform = getComputedStyle(carousel).transform;
    let matrix = new WebKitCSSMatrix(currentTransform);
    let currentIndex = Math.round(-matrix.m41 / carousel.offsetWidth);
    
    if (currentIndex > 0) {
      // Go to previous image
      carousel.style.transform = `translateX(-${(currentIndex - 1) * 100}%)`;
    } else {
      // Loop to last image
      carousel.style.transform = `translateX(-${(items.length - 1) * 100}%)`;
    }
  };

  window.carouselNext = function(index) {
    const carousel = document.getElementById(`carousel-${index}`);
    const items = carousel.children;
    let currentTransform = getComputedStyle(carousel).transform;
    let matrix = new WebKitCSSMatrix(currentTransform);
    let currentIndex = Math.round(-matrix.m41 / carousel.offsetWidth);
    
    if (currentIndex < items.length - 1) {
      // Go to next image
      carousel.style.transform = `translateX(-${(currentIndex + 1) * 100}%)`;
    } else {
      // Loop back to first image
      carousel.style.transform = `translateX(0%)`;
    }
  };
</script>