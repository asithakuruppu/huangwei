---
// Fundations
import Text from "@/components/fundations/elements/Text.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
import type { ImageMetadata } from 'astro';
// Images
import { Image } from "astro:assets";

import {data} from "@/projectData.astro";

interface Project {
  title: string;
  year: string;
  imagePath: ImageMetadata;
  images: { path: ImageMetadata }[];
  description?: string;
  category?: string;
}

const ProjectData: Project[] = data;
---
<Wrapper variant="standard" class="bg-[url('/path/to/your/image.jpg')] bg-cover bg-center bg-no-repeat bg-fixed max-w-none lg:max-w-6xl xl:max-w-7xl mx-auto">
<div class="grid grid-cols-[4fr_1fr_0.5fr] py-4 text-sm border-b border-neutral-200 text-black font-serif">
    <div>Project</div>
    <div class="text-center">Type</div>
    <div class="text-right">Year</div>
  </div>
  <div class="project-list divide-y divide-neutral-200">
    <!-- Project rows -->
    {
      ProjectData.map((project, index) => (
        <div class="group">
          <div class="grid grid-cols-[4fr_1fr_0.5fr] font-serif py-4 cursor-pointer items-center text-black">
            <div>
              <Text tag="p" variant="textBase" class="text-left text-xl">
                {project.title}
              </Text>
            </div>
            <div class="text-center italic text-neutral-500">
              <Text tag="p" variant="textBase" class="text-center text-xs">
                {project.category}
              </Text>
            </div>
            <div class="text-right italic text-neutral-500">
              <Text tag="p" variant="textBase" class="text-right text-xs">
                {project.year}
              </Text>
            </div>
          </div>
          <div class="overflow-hidden max-h-0 transition-[max-height] duration-500 ease-in-out">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-8 py-4 md:py-8">
              <div class="md:col-span-2">
                <Text
                  tag="p"
                  variant="textBase"
                  class="text-neutral-500 text-balance"
                >
                  {project.description}
                </Text>
                <div class="mt-8">
                  <!-- Additional content sections commented out -->
                </div>
              </div>
              <div class="md:col-start-3">
                <div
                  id={`openModal-${index}`}
                  class="cursor-pointer"
                  onclick={`openModal(${index})`}
                >
                  <Image
                    src={project.imagePath}
                    alt={project.title}
                    width="600"
                    height="400"
                    class="w-full h-64 object-cover object-center"
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            id={`modal-${index}`}
            class="fixed inset-0 z-50 overflow-y-auto scrollbar-hide h-full w-full hidden opacity-0 transition-opacity duration-300 ease-in-out pointer-events-none"
          >
            <div class="absolute top-12 left-4 right-4 max-w-5xl mx-auto bg-base-medium shadow ring ring-neutral-200 transition-all duration-300 ease-in-out transform translate-y-full pointer-events-auto">
              <button
                id={`closeModal-${index}`}
                class="absolute top-8 right-8 text-xs text-black"
              >
                Close
              </button>
              <div class="p-12 lg:p-16">
                <div class="flex items-center gap-2 text-black">
                  <span>·</span>
                  <Text tag="p" variant="textBase" class="font-serif">
                    <span>{project.title}</span>
                  </Text>
                  <span>·</span>
                </div>
                <div class="relative mt-8">
                  <div class="overflow-hidden">
                    <div class="flex transition-transform duration-300 ease-in-out" id={`carousel-${index}`}>
                      {Array.isArray(project.images) && project.images.length > 0 ? (
                        project.images.map((image, imgIndex) => (
                          <div class="min-w-full">
                            <Image
                              src={image.path}
                              alt={project.title}
                              width="1000"
                              height="700"
                              class="w-full h-64 md:h-[500px] object-cover object-center"
                            />
                          </div>
                        ))
                      ) : (
                        <div class="min-w-full">
                          <Image
                            src={project.imagePath}
                            alt={project.title}
                            width="1000"
                            height="700"
                            class="w-full h-64 md:h-[500px] object-cover object-center"
                          />
                        </div>
                      )}
                    </div>
                  </div>
                  {Array.isArray(project.images) && project.images.length > 1 && (
                    <>
                      <button
                        class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-neutral-900/50 text-white p-2 rounded-full"
                        onclick={`carouselPrev(${index})`}
                      >
                        ←
                      </button>
                      <button
                        class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-neutral-900/50 text-white p-2 rounded-full"
                        onclick={`carouselNext(${index})`}
                      >
                        →
                      </button>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</Wrapper>

<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    // Handle project row toggle
    const projectRows = document.querySelectorAll(".group");
    projectRows.forEach((row) => {
      const clickableArea = row.querySelector(".grid");
      const content = row.querySelector(".overflow-hidden");
      clickableArea.addEventListener("click", () => {
        projectRows.forEach((otherRow) => {
          if (otherRow !== row) {
            const otherContent = otherRow.querySelector(".overflow-hidden");
            otherRow.classList.remove("active");
            otherContent.style.maxHeight = "0";
          }
        });
        row.classList.toggle("active");
        if (row.classList.contains("active")) {
          content.style.maxHeight = content.scrollHeight + "px";
        } else {
          content.style.maxHeight = "0";
        }
      });
    });
  });

  // Modal and carousel functionality
  window.openModal = function(index) {
    const modal = document.getElementById(`modal-${index}`);
    const modalContent = modal.querySelector("div");
    modal.classList.remove("hidden");
    modal.offsetHeight;
    modal.classList.add("opacity-100");
    modalContent.classList.remove("translate-y-full");
  };

  document.addEventListener("DOMContentLoaded", () => {
    // Handle closing modals
    document.querySelectorAll("[id^='closeModal-']").forEach((button) => {
      button.addEventListener("click", () => {
        const index = button.id.split("-")[1];
        const modal = document.getElementById(`modal-${index}`);
        const modalContent = modal.querySelector("div");
        modal.classList.remove("opacity-100");
        modalContent.classList.add("translate-y-full");
        setTimeout(() => {
          modal.classList.add("hidden");
        }, 300);
      });
    });
    
    // Handle clicking outside modals
    document.querySelectorAll("[id^='modal-']").forEach((modal) => {
      const modalContent = modal.querySelector("div");
      modalContent.addEventListener("click", (e) => {
        if (e.target === modalContent) {
          modal.classList.remove("opacity-100");
          modalContent.classList.add("translate-y-full");
          setTimeout(() => {
            modal.classList.add("hidden");
          }, 300);
        }
      });
    });
  });

  window.carouselPrev = function(index) {
    const carousel = document.getElementById(`carousel-${index}`);
    const items = carousel.children;
    let currentTransform = getComputedStyle(carousel).transform;
    let matrix = new WebKitCSSMatrix(currentTransform);
    let currentIndex = Math.round(-matrix.m41 / carousel.offsetWidth);
    
    if (currentIndex > 0) {
      carousel.style.transform = `translateX(-${(currentIndex - 1) * 100}%)`;
    } else {
      carousel.style.transform = `translateX(-${(items.length - 1) * 100}%)`;
    }
  };

  window.carouselNext = function(index) {
    const carousel = document.getElementById(`carousel-${index}`);
    const items = carousel.children;
    let currentTransform = getComputedStyle(carousel).transform;
    let matrix = new WebKitCSSMatrix(currentTransform);
    let currentIndex = Math.round(-matrix.m41 / carousel.offsetWidth);
    
    if (currentIndex < items.length - 1) {
      carousel.style.transform = `translateX(-${(currentIndex + 1) * 100}%)`;
    } else {
      carousel.style.transform = `translateX(0%)`;
    }
  };
</script>